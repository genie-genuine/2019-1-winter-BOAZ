# 데이터 읽기
getwd()
setwd("C:\Users\USER\Documents\Github\2019-1-winter-BOAZ\TABLEAU\input")
setwd("C:\\Users\\USER\\Documents\\Github\\2019-1-winter-BOAZ\\TABLEAU\\input")
orders <- fread("orders.csv", encoding = "UTF-8")
library(data.table)
orders <- fread("orders.csv", encoding = "UTF-8")
library(dplyr)
#======================#
# superstore DR 10 EDA #
#======================#
library(tidyverse)
ordrs %>% tibble_df()
ordres %>% tibble_df()
orders %>% tibble_df()
orders %>% tbl_df()
str(orders)
orders <-tbl_df(orders)
str(orders)
head(orders) %>% print(width=Inf)
##########
# 전처리 #
##########
# 변수명 바꾸기: 띄어쓰기를 _ 로 사용
x <- names(orders)        # colnames처럼 변수명 불러오기
# sapply - apply a function over a list or vector
# gsub - pattern Matching and replacement
# gsub(pattern, replacement, x)
names(orders) <- as.vector(
sapply(x, function(x) if(is.character(x)) gsub("", "`", x) else(x)))
x
names(orders)
orders <- fread("orders.csv", encoding = "UTF-8")
# 데이터 살펴보기
orders <-tbl_df(orders)
str(orders)
head(orders) %>% print(width=Inf)
names(orders)
dim(orders)
##########
# 전처리 #
##########
str(orders)
# 변수형태
# Sales, Date: chr -> nummeric
# "$", "," 사인제거
names(orders)
summary(orders)
dim(orders)    # 40개의 변수
orders %>% select(-"Sales % Difference from Previous", -"MTD Sales % Difference",
-"MTD Profit % Difference", -"YTD Sales % Difference")
# 40개의 변수
names(orders)
orders <-
orders %>%
select(-"Sales % Difference from Previous", -"MTD Sales % Difference",
-"MTD Profit % Difference", -"YTD Sales % Difference")
# 40개의 변수
names(orders)
##########
# 전처리 #
##########
str(orders)
# 변수형태
# Sales, Ship Date, Order Date : chr -> nummeric
# "$", "," 사인제거
names(orders)
orders[29]
x1 <- orders[29]
as.vector(sapply(x1, function(x1) if(is.character(x1)) gsub("\\$", "", x1)
else(x1)))
x1 <- orders[29]
x1 <- as.vector(sapply(x1, function(x1) if(is.character(x1)) gsub(",", "", x1) else(x1)))
orders[29] <- as.vector(sapply(x1, function(x1) if(is.character(x1)) gsub("\\$", "", x1) else(x1)))
orders[29]
orders[29] %>% as.numeric()
orders[29] %>% as_numeric()
orders[29] %>% as.numeric()
orders[29] %>% as.double()
as.numeric(orders$Sales)
type(orders$Sales)
class(orders$Sales)
orders$Sales <- as.numeric(orders$Sales)
class(orders$Sales)
##########
# 전처리 #
##########
str(orders)
# 변수형태
# Sales, Ship Date, Order Date : chr -> nummeric
# Sales: "$", "," 사인제거
names(orders)
as.tibble(lapply(orders[16], parse_number))
wage[16] <- as.tibble(lapply(wage[16], parse_date))
as.tibble(lapply(orders[16], parse_date))
orders[16] <- as.tibble(lapply(orders[16], parse_date))
orders %>% print(width = Inf)
range(orders$`Order Date`)
#
orders %>% count(`Order Date`, `Customer Name`)
# 한번에 몇개 구매
orders %>% summarise(n=sum(`Order Quantity`))
# 한번에 몇개 구매
orders %>% group_by(Order Date) %>% summarise(n=sum(`Order Quantity`))
# 한번에 몇개 구매
orders %>% group_by(`Order Date`) %>% summarise(n=sum(`Order Quantity`))
# 한번에 몇개 구매
orders %>% group_by(`Order Date`, `Customer Name`) %>% summarise(n=sum(`Order Quantity`))
# 고객별 년간 구매건수
orders %>% separate(`Order Date`, into = ("year", "month", "day"), sep ="-", convert=TRUE)
# 고객별 년간 구매건수
orders %>% separate(`Order Date`, into = c("year", "month", "day"), sep ="-", convert=TRUE)
# 고객별 년간 구매건수
orders %>%
separate(`Order Date`, into = c("year", "month", "day"), sep ="-", convert=TRUE) %>%
group_by(year, `Customer Name`) %>%
summarise(n=sum(`Order Quantity`))
# 고객별 년간 구매건수
orders %>%
separate(`Order Date`, into = c("year", "month", "day"), sep ="-", convert=TRUE) %>%
group_by(year, `Customer Name`) %>%
summarise(n=sum(`Order Quantity`)) %>%
arrange(year)
# 고객별 년간 구매건수
orders %>%
separate(`Order Date`, into = c("year", "month", "day"), sep ="-", convert=TRUE) %>%
group_by(year, `Customer Name`) %>%
summarise(n=sum(`Order Quantity`)) %>%
arrange(desc(year))
# 변수형태
# Sales, Ship Date, Order Date : chr -> nummeric
# Sales: "$", "," 사인제거
names(orders)
# 어느 품목이 가장 많은 수익을 내는가
orders %>% group_by(`Product Sub-Category`) %>%
orders %>% filter(`Row ID`==1)
orders %>% filter(`Row ID`==1)
orders %>% filter(`Row ID`==1) %>% select(`Product Base Margin`, `Product Category`,
`Product Sub-Category`, Profit, Discount)
orders %>% filter(`Row ID`==1) %>% select(`Product Base Margin`, `Product Category`,
`Product Sub-Category`, Profit, Discount,
`Unit Price`, `Shipping Cost`) %>%
print(width="Inf")
orders %>% filter(`Row ID`==1) %>% select(`Product Base Margin`, `Product Category`,
`Product Sub-Category`, Profit, Discount,
`Unit Price`, `Shipping Cost`) %>%
print(width=Inf)
orders %>% filter(`Row ID`==1) %>% select(`Product Base Margin`, `Product Category`,
`Product Sub-Category`, Profit, Discount,
`Unit Price`, `Shipping Cost`, `Order Quantity`) %>%
print(width=Inf)
orders %>% arrange(`Product Name`)
orders %>% arrange(`Product Name`) %>% select(`Product Name`, `Product Base Margin`)
orders %>% arrange(`Product Name`) %>% select(`Product Name`, `Product Base Margin`, `Unit Price`) %>%
print(width=Inf)
# 어느 품목이 가장 많은 수익을 내는가
orders %>% mutate(Unit_profit_margin = `Product Base Margin`*`Unit Price`)
# 어느 품목이 가장 많은 수익을 내는가
orders %>% transmute(Unit_profit_margin = `Product Base Margin`*`Unit Price`)
# 개당 마진 변수 생성
orders <- orders %>% mutate(Unit_profit_margin = `Product Base Margin`*`Unit Price`)
# 어느 품목이 가장 많은 수익을 내는가
orders %>% group_by(`Product Sub-Category`) %>% arrange(desc(Unit_profit_margin))
# 어느 품목이 가장 많은 수익을 내는가
orders %>% group_by(`Product Sub-Category`) %>% arrange(desc(Unit_profit_margin)) %>%
select(`Product Category`,`Product Sub-Category`, Unit_profit_margin)
# 어느 품목이 가장 많은 수익을 내는가
orders %>% group_by(`Product Category`,`Product Sub-Category`) %>%
arrange(desc(Unit_profit_margin)) %>%
select(`Product Category`,`Product Sub-Category`, Unit_profit_margin)
# 어느 품목이 가장 많은 수익을 내는가
orders %>% group_by(`Product Category`,`Product Sub-Category`) %>%
count(Unit_profit_margin) %>% arrange(desc(Unit_profit_margin)) %>%
select(`Product Category`,`Product Sub-Category`, Unit_profit_margin)
# 어느 품목이 가장 많은 수익을 내는가
orders %>% group_by(`Product Category`,`Product Sub-Category`) %>%
count(Unit_profit_margin) %>% arrange(desc(Unit_profit_margin)) %>%
select(`Product Category`,`Product Sub-Category`, `Product Name`, Unit_profit_margin)
# 어느 품목이 가장 많은 수익을 내는가
orders %>% group_by(`Product Category`,`Product Sub-Category` `Product Name`) %>%
count(Unit_profit_margin) %>% arrange(desc(Unit_profit_margin))
# 어느 품목이 가장 많은 수익을 내는가
orders %>% group_by(`Product Category`,`Product Sub-Category` `Product Name`) %>%
count(Unit_profit_margin) %>% arrange(desc(Unit_profit_margin))
# 어느 품목이 가장 많은 수익을 내는가
orders %>% group_by(`Product Category`,`Product Sub-Category`,`Product Name`) %>%
count(Unit_profit_margin) %>% arrange(desc(Unit_profit_margin))
# 할인율 - 구매수량 상관관계
orders %>% ggplot(aes(Discount, `Order Quantity`)) + geom_point()
lm(orders$Discount,orders$`Order Quantity`)
?regression
lm(orders$`Order Quantity`~orders$Discount)
coef(orders$`Order Quantity`, orders$Discount)
?coef
coef(orders$Order Quantity, orders$Discount)
coef(orders$`Order Quantity`, orders$Discount)
reg.dq<- lm(orders$`Order Quantity`~orders$Discount)
summary(reg.dq)
coef(reg.dq)
# Order Quantity * Unit Price * (1-Discount) = Sale?
check<- orders %>% transmute(New_sale = `Order Quantity`*`Unit Price`*(1-Discount))
check$New_sale == orders$Sales
# 할인율 - 가격(Unit Price) 상관관계 =
orders %>% ggplot(aes(Discount, `Unit Price`)) + geom_point()
# 할인율 - 가격(Unit Price) 상관관계 =
orders %>% ggplot(aes(Discount, `Unit Price`)) + geom_jitter()
reg.dq<- lm(orders$`Unit Price`~orders$Discount)
summary(reg.dq)
# Order Quantity * Unit Price * (1-Discount) = Sale?
check<- orders %>% transmute(New_sale = `Order Quantity`*`Unit Price`*(1-Discount)+`Shipping Cost`)
check$New_sale == orders$Sales
# 할인율 - 구매수량 상관관계 = 없다, 유의하지 않다
orders %>% ggplot(aes(Discount, `Order Quantity`)) + geom_point()
# Order Quantity * Unit Price * (1-Discount) = Sale? 아니다...
check<- orders %>% transmute(New_sale = `Order Quantity`*`Unit Price`*(1-Discount)-`Shipping Cost`)
check$New_sale == orders$Sales
# Order Quantity * Unit Price * (1-Discount)  = Sale? 아니다...
check<- orders %>% transmute(New_sale = `Order Quantity`*`Unit Price`*(1-Discount))
check$New_sale == orders$Sales
# product 종류
orders %>% count(`Product Name`)
# 고객별 년간 구매건수
freq_year<-
orders %>%
separate(`Order Date`, into = c("year", "month", "day"), sep ="-", convert=TRUE) %>%
group_by(year, `Customer Name`) %>%
summarise(n=sum(`Order Quantity`))
freq_year
freq_year %>%
orders$`Customer Segment`
freq_year %>%
table(orders$`Customer Segment`)
names(orders)    # 36개의 변수
freq_year %>%
orders %>% count(Customer Segment)
freq_year %>%
orders %>% count(Customer Segment)
orders %>% count(Customer Segment)
orders %>% count(`Customer Segment`)
# segment당 고객 수
orders %>% count(`Customer Name`)
# 4년간의 고객구매데이터
range(orders$`Order Date`)
# 어느 품목이 가장 많은 수익을 내는가
orders %>% group_by(`Product Category`,`Product Sub-Category`,`Product Name`) %>%
count(Unit_profit_margin) %>% arrange(desc(Unit_profit_margin))
orders %>% group_by(`Product Sub-Category`) %>%
count(Unit_profit_margin) %>% arrange(desc(Unit_profit_margin))
orders %>% print(n=Inf)
orders %>% print(n=Inf)
orders %>% print(width=Inf)
# total margin per row
order %>% transmute(tot_margin_per_purchase = Unit_profit_margin*Order Quantity)
# total margin per row
order %>% mutate(tot_margin_per_purchase = Unit_profit_margin*Order Quantity)
# total margin per row
order %>% mutate(tot_margin_per_purchase = Unit_profit_margin*`Order Quantity`)
library(tidyverse)
library(dplyr)
library(data.table)
library(lubridate)
library(gtable)
# total margin per row
order %>% mutate(tot_margin_per_purchase = Unit_profit_margin*`Order Quantity`)
# total margin per row
order %>% mutate(tot_margin_per_purchase = "Unit_profit_margin"*`Order Quantity`)
# total margin per row
orders %>% mutate(tot_margin_per_purchase = Unit_profit_margin*`Order Quantity`)
# total margin per row
orders %>% transmute(tot_margin_per_purchase = Unit_profit_margin*`Order Quantity`)
# total margin per row
orders <- orders %>% transmute(tot_margin_per_purchase = Unit_profit_margin*`Order Quantity`)
# 할인율 범위
range(orders$discount)
reg.dq<- lm(orders$`Order Quantity`~orders$Discount)
summary(reg.dq)
library(tidyverse)
library(dplyr)
library(data.table)
library(lubridate)
library(gtable)
# 데이터 읽기
getwd()
setwd("C:\\Users\\USER\\Documents\\Github\\2019-1-winter-BOAZ\\TABLEAU\\input")
orders_raw <- fread("orders.csv", encoding = "UTF-8")
orders <- orders_raw # 원데이터 복사
# 데이터 살펴보기
orders <-tbl_df(orders)
head(orders) %>% print(width=Inf)
dim(orders)
summary(orders)
orders <-
orders %>%
select(-"Sales % Difference from Previous", -"MTD Sales % Difference",
-"MTD Profit % Difference", -"YTD Sales % Difference")
names(orders)    # 36개의 변수
##########
# 전처리 #
##########
str(orders)
# 변수형태
# Sales, Ship Date, Order Date : chr -> nummeric
# Sales: "$", "," 사인제거
names(orders)
x1 <- orders[29]
x1 <- as.vector(sapply(x1, function(x1) if(is.character(x1)) gsub(",", "", x1) else(x1)))
orders[29] <- as.vector(sapply(x1, function(x1) if(is.character(x1)) gsub("\\$", "", x1) else(x1)))
orders$Sales <- as.numeric(orders$Sales)
class(orders$Sales)
# number, date parsing
orders[16] <- as.tibble(lapply(orders[16], parse_date))
orders %>% print(width = Inf)
# # 구현사항
# - MAIN TARGET 고객(VIP) 설정 기준(두가지이상 변수 활용 ex구매수량, 구매금액 등)을 정하고 매개변수를 활용해 시각화하시오…
# - 날짜를 매개변수로 사용해서 (세부적인 기준을 각자 설정하여) 판매가치가 높은 상품 분석 및 시각화
# - 할인정책을 세우고자 할때, 할인율을 얼마로 하면 좋을지에 대해 결정할 때 가장 효과적이라 생각되는 그래프
# - 계산된 필드를 이용하여 2014년도와 2015년도를 비교할 수 있도록 효율적으로 시각화(단, 1년 내에 기간 설정은 자유롭게(ex)월별로, 분기별로))
# 4년간의 고객구매데이터
range(orders$`Order Date`)
# 고객별 일별 구매량
orders %>% group_by(`Order Date`, `Customer Name`) %>%
summarise(n=sum(`Order Quantity`))
# 개당 마진 변수 생성
orders <- orders %>% mutate(Unit_profit_margin = `Product Base Margin`*`Unit Price`)
# total margin per row
orders <- orders %>% transmute(tot_margin_per_purchase = Unit_profit_margin*`Order Quantity`)
# 할인율 - 구매수량 상관관계 = 없다, 유의하지 않다
orders %>% group_by(customer name) ggplot(aes(Discount, `Order Quantity`)) + geom_point()
# 할인율 - 구매수량 상관관계 = 없다, 유의하지 않다
orders %>% group_by(customer name)
